def infix_to_postfix(infix_expr):
    operator_stack = []
    output = []
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}

    def has_higher_precedence(op1, op2):
        return precedence[op1] >= precedence[op2]

    def is_operator(char):
        return char in precedence

    for char in infix_expr:
        if char.isalnum():
            output.append(char)
        elif char == '(':
            operator_stack.append(char)
        elif char == ')':
            while operator_stack and operator_stack[-1] != '(':
                output.append(operator_stack.pop())
            operator_stack.pop()  # Discard the '('
        elif is_operator(char):
            while operator_stack and has_higher_precedence(operator_stack[-1], char):
                output.append(operator_stack.pop())
            operator_stack.append(char)

    while operator_stack:
        output.append(operator_stack.pop())

    return ''.join(output)

def test_infix_to_postfix():
    test_values = ["3+5*2", "((8+3)*5)/(7-2)", "a+b*c/d", "A*B+C*D", "a+b^c/d"]

    for infix_expr in test_values:
        postfix_expr = infix_to_postfix(infix_expr)
        print(f"Infix: {infix_expr}  -->  Postfix: {postfix_expr}")

# Test the function
if __name__ == "__main__":
    test_infix_to_postfix()
